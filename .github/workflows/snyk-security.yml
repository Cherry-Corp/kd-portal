name: Snyk Security

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  snyk:
      permissions:
        contents: read
        security-events: write
        actions: read
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@master

        - name: Install pnpm
          run: npm install -g pnpm
          
        - name: Install dependencies
          run: pnpm install

        - name: Setup environment file
          run: cp .env.example .env
        
        - name: Set up Snyk CLI to check for security issues
          # uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
          uses: snyk/actions/node@master

          # For Snyk Open Source you must first set up the development environment for your application's dependencies
          # For example for Node
          #- uses: actions/setup-node@v4
          #  with:
          #    node-version: 20

          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            command: monitor

          # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        - name: Snyk Code test
          #run: snyk code test --sarif > snyk-code.sarif || true
          #run: snyk code test --sarif > snyk-code.sarif 2> snyk-error.log || true
          #run: snyk code test --sarif --json-file-output=snyk-code.sarif || true
          run: snyk code test --sarif --json-file-output=snyk-code.sarif 2> snyk-error.log || true
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        
          #SAST debug
        #- name: Show Snyk Code errors
          #run: cat snyk-error.log
        #  if: always()
        #  run: cat snyk-error.log || true
  
          # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
          #- name: Snyk Open Source monitor
          # run: snyk monitor --all-projects

          # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
        - name: Snyk IaC test and report
          run: snyk iac test --report || true
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

          # Build the docker image for testing
        #- name: Build a Docker image
          ##run: docker build -t your/image-to-test .
          ##run: | 
          ##    docker build --progress=plain -t your/image-to-test . > docker-build.log 2>&1 || (cat docker-build.log && exit 1)
        #run: docker build -t my-app-image .
    
          # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
        #- name: Snyk Container monitor
        #  run: snyk container monitor your/image-to-test --file=Dockerfile

        # Check SARIF output exists
        - name: Check if snyk-code.sarif exists and is not empty
          run: |
               if [ ! -s snyk-code.sarif ]; then
               echo "‚ùå Snyk SARIF file is missing or empty!"
               cat snyk-error.log || echo "No error log"
               exit 1
               fi
    
          # Push the Snyk Code results into GitHub Code Scanning tab
        - name: Upload result to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: snyk-code.sarif
